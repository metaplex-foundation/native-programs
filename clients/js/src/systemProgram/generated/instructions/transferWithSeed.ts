/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  publicKey as publicKeySerializer,
  string,
  struct,
  u32,
  u64,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type TransferWithSeedInstructionAccounts = {
  /** The account funding the transfer */
  fundingAccount: PublicKey | Pda;
  /** The base public key to use for the account's address derivation */
  base: Signer;
  /** The account receiving the transfer */
  recipientAccount: PublicKey | Pda;
};

// Data.
export type TransferWithSeedInstructionData = {
  discriminator: number;
  /** Number of lamports to transfer */
  lamports: bigint;
  /** Seed to use to derive the funding account address */
  fromSeed: string;
  /** Owner to use to derive the funding account address */
  fromOwner: PublicKey;
};

export type TransferWithSeedInstructionDataArgs = {
  /** Number of lamports to transfer */
  lamports: number | bigint;
  /** Seed to use to derive the funding account address */
  fromSeed: string;
  /** Owner to use to derive the funding account address */
  fromOwner: PublicKey;
};

export function getTransferWithSeedInstructionDataSerializer(): Serializer<
  TransferWithSeedInstructionDataArgs,
  TransferWithSeedInstructionData
> {
  return mapSerializer<
    TransferWithSeedInstructionDataArgs,
    any,
    TransferWithSeedInstructionData
  >(
    struct<TransferWithSeedInstructionData>(
      [
        ['discriminator', u32()],
        ['lamports', u64()],
        ['fromSeed', string()],
        ['fromOwner', publicKeySerializer()],
      ],
      { description: 'TransferWithSeedInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 11 })
  ) as Serializer<
    TransferWithSeedInstructionDataArgs,
    TransferWithSeedInstructionData
  >;
}

// Args.
export type TransferWithSeedInstructionArgs =
  TransferWithSeedInstructionDataArgs;

// Instruction.
export function transferWithSeed(
  context: Pick<Context, 'programs'>,
  input: TransferWithSeedInstructionAccounts & TransferWithSeedInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'systemProgram',
    '11111111111111111111111111111111'
  );

  // Accounts.
  const resolvedAccounts = {
    fundingAccount: {
      index: 0,
      isWritable: true as boolean,
      value: input.fundingAccount ?? null,
    },
    base: { index: 1, isWritable: false as boolean, value: input.base ?? null },
    recipientAccount: {
      index: 2,
      isWritable: true as boolean,
      value: input.recipientAccount ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: TransferWithSeedInstructionArgs = { ...input };

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getTransferWithSeedInstructionDataSerializer().serialize(
    resolvedArgs as TransferWithSeedInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
