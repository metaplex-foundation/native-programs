/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  TransactionBuilder,
  publicKey,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  publicKey as publicKeySerializer,
  struct,
  u32,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type InitializeNonceAccountInstructionAccounts = {
  /** The nonce account to initialize */
  nonceAccount: PublicKey | Pda;
  /** The recentBlockhashes sysvar */
  recentBlockhashes: PublicKey | Pda;
  /** The Rent sysvar */
  rent?: PublicKey | Pda;
};

// Data.
export type InitializeNonceAccountInstructionData = {
  discriminator: number;
  /** The authority specifies the entity authorized to execute nonce instruction on the account, no signatures are required to execute this instruction, enabling derived nonce account addresses */
  authority: PublicKey;
};

export type InitializeNonceAccountInstructionDataArgs = {
  /** The authority specifies the entity authorized to execute nonce instruction on the account, no signatures are required to execute this instruction, enabling derived nonce account addresses */
  authority: PublicKey;
};

export function getInitializeNonceAccountInstructionDataSerializer(): Serializer<
  InitializeNonceAccountInstructionDataArgs,
  InitializeNonceAccountInstructionData
> {
  return mapSerializer<
    InitializeNonceAccountInstructionDataArgs,
    any,
    InitializeNonceAccountInstructionData
  >(
    struct<InitializeNonceAccountInstructionData>(
      [
        ['discriminator', u32()],
        ['authority', publicKeySerializer()],
      ],
      { description: 'InitializeNonceAccountInstructionData' }
    ),
    (value) => ({ ...value, discriminator: 6 })
  ) as Serializer<
    InitializeNonceAccountInstructionDataArgs,
    InitializeNonceAccountInstructionData
  >;
}

// Args.
export type InitializeNonceAccountInstructionArgs =
  InitializeNonceAccountInstructionDataArgs;

// Instruction.
export function initializeNonceAccount(
  context: Pick<Context, 'programs'>,
  input: InitializeNonceAccountInstructionAccounts &
    InitializeNonceAccountInstructionArgs
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'systemProgram',
    '11111111111111111111111111111111'
  );

  // Accounts.
  const resolvedAccounts = {
    nonceAccount: {
      index: 0,
      isWritable: true as boolean,
      value: input.nonceAccount ?? null,
    },
    recentBlockhashes: {
      index: 1,
      isWritable: false as boolean,
      value: input.recentBlockhashes ?? null,
    },
    rent: { index: 2, isWritable: false as boolean, value: input.rent ?? null },
  } satisfies ResolvedAccountsWithIndices;

  // Arguments.
  const resolvedArgs: InitializeNonceAccountInstructionArgs = { ...input };

  // Default values.
  if (!resolvedAccounts.rent.value) {
    resolvedAccounts.rent.value = publicKey(
      'SysvarRent111111111111111111111111111111111'
    );
  }

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'programId',
    programId
  );

  // Data.
  const data = getInitializeNonceAccountInstructionDataSerializer().serialize(
    resolvedArgs as InitializeNonceAccountInstructionDataArgs
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
