/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Context,
  Pda,
  PublicKey,
  Signer,
  TransactionBuilder,
  transactionBuilder,
} from '@metaplex-foundation/umi';
import {
  Serializer,
  mapSerializer,
  struct,
  u32,
} from '@metaplex-foundation/umi/serializers';
import {
  ResolvedAccount,
  ResolvedAccountsWithIndices,
  getAccountMetasAndSigners,
} from '../shared';

// Accounts.
export type CreateAccountWithSeedInstructionAccounts = {
  /** The payer for the new account */
  fundingAccount: Signer;
  /** The account to create */
  newAccount: PublicKey | Pda;
  /** The account matching the base Pubkey below must be provided as a signer, but may be the same as the funding account and provided as account 0 */
  baseAccount?: Signer;
};

// Data.
export type CreateAccountWithSeedInstructionData = { discriminator: number };

export type CreateAccountWithSeedInstructionDataArgs = {};

export function getCreateAccountWithSeedInstructionDataSerializer(): Serializer<
  CreateAccountWithSeedInstructionDataArgs,
  CreateAccountWithSeedInstructionData
> {
  return mapSerializer<
    CreateAccountWithSeedInstructionDataArgs,
    any,
    CreateAccountWithSeedInstructionData
  >(
    struct<CreateAccountWithSeedInstructionData>([['discriminator', u32()]], {
      description: 'CreateAccountWithSeedInstructionData',
    }),
    (value) => ({ ...value, discriminator: 3 })
  ) as Serializer<
    CreateAccountWithSeedInstructionDataArgs,
    CreateAccountWithSeedInstructionData
  >;
}

// Instruction.
export function createAccountWithSeed(
  context: Pick<Context, 'programs'>,
  input: CreateAccountWithSeedInstructionAccounts
): TransactionBuilder {
  // Program ID.
  const programId = context.programs.getPublicKey(
    'systemProgram',
    '11111111111111111111111111111111'
  );

  // Accounts.
  const resolvedAccounts = {
    fundingAccount: {
      index: 0,
      isWritable: true as boolean,
      value: input.fundingAccount ?? null,
    },
    newAccount: {
      index: 1,
      isWritable: true as boolean,
      value: input.newAccount ?? null,
    },
    baseAccount: {
      index: 2,
      isWritable: false as boolean,
      value: input.baseAccount ?? null,
    },
  } satisfies ResolvedAccountsWithIndices;

  // Accounts in order.
  const orderedAccounts: ResolvedAccount[] = Object.values(
    resolvedAccounts
  ).sort((a, b) => a.index - b.index);

  // Keys and Signers.
  const [keys, signers] = getAccountMetasAndSigners(
    orderedAccounts,
    'omitted',
    programId
  );

  // Data.
  const data = getCreateAccountWithSeedInstructionDataSerializer().serialize(
    {}
  );

  // Bytes Created On Chain.
  const bytesCreatedOnChain = 0;

  return transactionBuilder([
    { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
  ]);
}
