//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

/// Accounts.
pub struct InitializeNonceAccount {
    /// The nonce account to initialize
    pub nonce_account: solana_program::pubkey::Pubkey,
    /// The recentBlockhashes sysvar
    pub recent_blockhashes: solana_program::pubkey::Pubkey,
    /// The Rent sysvar
    pub rent: solana_program::pubkey::Pubkey,
}

impl InitializeNonceAccount {
    pub fn instruction(
        &self,
        args: InitializeNonceAccountInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: InitializeNonceAccountInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.nonce_account,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.recent_blockhashes,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            self.rent, false,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = InitializeNonceAccountInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SYSTEM_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct InitializeNonceAccountInstructionData {
    discriminator: u32,
}

impl InitializeNonceAccountInstructionData {
    fn new() -> Self {
        Self { discriminator: 6 }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct InitializeNonceAccountInstructionArgs {
    pub authority: Pubkey,
}

/// Instruction builder for `InitializeNonceAccount`.
///
/// ### Accounts:
///
///   0. `[writable]` nonce_account
///   1. `[]` recent_blockhashes
///   2. `[optional]` rent (default to `SysvarRent111111111111111111111111111111111`)
#[derive(Default)]
pub struct InitializeNonceAccountBuilder {
    nonce_account: Option<solana_program::pubkey::Pubkey>,
    recent_blockhashes: Option<solana_program::pubkey::Pubkey>,
    rent: Option<solana_program::pubkey::Pubkey>,
    authority: Option<Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl InitializeNonceAccountBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The nonce account to initialize
    #[inline(always)]
    pub fn nonce_account(&mut self, nonce_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.nonce_account = Some(nonce_account);
        self
    }
    /// The recentBlockhashes sysvar
    #[inline(always)]
    pub fn recent_blockhashes(
        &mut self,
        recent_blockhashes: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.recent_blockhashes = Some(recent_blockhashes);
        self
    }
    /// `[optional account, default to 'SysvarRent111111111111111111111111111111111']`
    /// The Rent sysvar
    #[inline(always)]
    pub fn rent(&mut self, rent: solana_program::pubkey::Pubkey) -> &mut Self {
        self.rent = Some(rent);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: Pubkey) -> &mut Self {
        self.authority = Some(authority);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = InitializeNonceAccount {
            nonce_account: self.nonce_account.expect("nonce_account is not set"),
            recent_blockhashes: self
                .recent_blockhashes
                .expect("recent_blockhashes is not set"),
            rent: self.rent.unwrap_or(solana_program::pubkey!(
                "SysvarRent111111111111111111111111111111111"
            )),
        };
        let args = InitializeNonceAccountInstructionArgs {
            authority: self.authority.clone().expect("authority is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `initialize_nonce_account` CPI accounts.
pub struct InitializeNonceAccountCpiAccounts<'a, 'b> {
    /// The nonce account to initialize
    pub nonce_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The recentBlockhashes sysvar
    pub recent_blockhashes: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Rent sysvar
    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `initialize_nonce_account` CPI instruction.
pub struct InitializeNonceAccountCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The nonce account to initialize
    pub nonce_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The recentBlockhashes sysvar
    pub recent_blockhashes: &'b solana_program::account_info::AccountInfo<'a>,
    /// The Rent sysvar
    pub rent: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: InitializeNonceAccountInstructionArgs,
}

impl<'a, 'b> InitializeNonceAccountCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: InitializeNonceAccountCpiAccounts<'a, 'b>,
        args: InitializeNonceAccountInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            nonce_account: accounts.nonce_account,
            recent_blockhashes: accounts.recent_blockhashes,
            rent: accounts.rent,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(3 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.nonce_account.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.recent_blockhashes.key,
            false,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new_readonly(
            *self.rent.key,
            false,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = InitializeNonceAccountInstructionData::new()
            .try_to_vec()
            .unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SYSTEM_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(3 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.nonce_account.clone());
        account_infos.push(self.recent_blockhashes.clone());
        account_infos.push(self.rent.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `InitializeNonceAccount` via CPI.
///
/// ### Accounts:
///
///   0. `[writable]` nonce_account
///   1. `[]` recent_blockhashes
///   2. `[]` rent
pub struct InitializeNonceAccountCpiBuilder<'a, 'b> {
    instruction: Box<InitializeNonceAccountCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> InitializeNonceAccountCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(InitializeNonceAccountCpiBuilderInstruction {
            __program: program,
            nonce_account: None,
            recent_blockhashes: None,
            rent: None,
            authority: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The nonce account to initialize
    #[inline(always)]
    pub fn nonce_account(
        &mut self,
        nonce_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.nonce_account = Some(nonce_account);
        self
    }
    /// The recentBlockhashes sysvar
    #[inline(always)]
    pub fn recent_blockhashes(
        &mut self,
        recent_blockhashes: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.recent_blockhashes = Some(recent_blockhashes);
        self
    }
    /// The Rent sysvar
    #[inline(always)]
    pub fn rent(&mut self, rent: &'b solana_program::account_info::AccountInfo<'a>) -> &mut Self {
        self.instruction.rent = Some(rent);
        self
    }
    #[inline(always)]
    pub fn authority(&mut self, authority: Pubkey) -> &mut Self {
        self.instruction.authority = Some(authority);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = InitializeNonceAccountInstructionArgs {
            authority: self
                .instruction
                .authority
                .clone()
                .expect("authority is not set"),
        };
        let instruction = InitializeNonceAccountCpi {
            __program: self.instruction.__program,

            nonce_account: self
                .instruction
                .nonce_account
                .expect("nonce_account is not set"),

            recent_blockhashes: self
                .instruction
                .recent_blockhashes
                .expect("recent_blockhashes is not set"),

            rent: self.instruction.rent.expect("rent is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct InitializeNonceAccountCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    nonce_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    recent_blockhashes: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    rent: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    authority: Option<Pubkey>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
