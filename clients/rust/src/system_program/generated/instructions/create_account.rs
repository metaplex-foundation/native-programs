//! This code was AUTOGENERATED using the kinobi library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun kinobi to update it.
//!
//! [https://github.com/metaplex-foundation/kinobi]
//!

use borsh::BorshDeserialize;
use borsh::BorshSerialize;
use solana_program::pubkey::Pubkey;

/// Accounts.
pub struct CreateAccount {
    /// The payer for the new account
    pub funding_account: solana_program::pubkey::Pubkey,
    /// The account to create
    pub new_account: solana_program::pubkey::Pubkey,
}

impl CreateAccount {
    pub fn instruction(
        &self,
        args: CreateAccountInstructionArgs,
    ) -> solana_program::instruction::Instruction {
        self.instruction_with_remaining_accounts(args, &[])
    }
    #[allow(clippy::vec_init_then_push)]
    pub fn instruction_with_remaining_accounts(
        &self,
        args: CreateAccountInstructionArgs,
        remaining_accounts: &[solana_program::instruction::AccountMeta],
    ) -> solana_program::instruction::Instruction {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.funding_account,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            self.new_account,
            true,
        ));
        accounts.extend_from_slice(remaining_accounts);
        let mut data = CreateAccountInstructionData::new().try_to_vec().unwrap();
        let mut args = args.try_to_vec().unwrap();
        data.append(&mut args);

        solana_program::instruction::Instruction {
            program_id: crate::SYSTEM_PROGRAM_ID,
            accounts,
            data,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize)]
struct CreateAccountInstructionData {
    discriminator: u32,
}

impl CreateAccountInstructionData {
    fn new() -> Self {
        Self { discriminator: 0 }
    }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct CreateAccountInstructionArgs {
    pub lamports: u64,
    pub space: u64,
    pub owner: Pubkey,
}

/// Instruction builder for `CreateAccount`.
///
/// ### Accounts:
///
///   0. `[writable, signer]` funding_account
///   1. `[writable, signer]` new_account
#[derive(Default)]
pub struct CreateAccountBuilder {
    funding_account: Option<solana_program::pubkey::Pubkey>,
    new_account: Option<solana_program::pubkey::Pubkey>,
    lamports: Option<u64>,
    space: Option<u64>,
    owner: Option<Pubkey>,
    __remaining_accounts: Vec<solana_program::instruction::AccountMeta>,
}

impl CreateAccountBuilder {
    pub fn new() -> Self {
        Self::default()
    }
    /// The payer for the new account
    #[inline(always)]
    pub fn funding_account(
        &mut self,
        funding_account: solana_program::pubkey::Pubkey,
    ) -> &mut Self {
        self.funding_account = Some(funding_account);
        self
    }
    /// The account to create
    #[inline(always)]
    pub fn new_account(&mut self, new_account: solana_program::pubkey::Pubkey) -> &mut Self {
        self.new_account = Some(new_account);
        self
    }
    #[inline(always)]
    pub fn lamports(&mut self, lamports: u64) -> &mut Self {
        self.lamports = Some(lamports);
        self
    }
    #[inline(always)]
    pub fn space(&mut self, space: u64) -> &mut Self {
        self.space = Some(space);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: Pubkey) -> &mut Self {
        self.owner = Some(owner);
        self
    }
    /// Add an aditional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: solana_program::instruction::AccountMeta,
    ) -> &mut Self {
        self.__remaining_accounts.push(account);
        self
    }
    /// Add additional accounts to the instruction.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[solana_program::instruction::AccountMeta],
    ) -> &mut Self {
        self.__remaining_accounts.extend_from_slice(accounts);
        self
    }
    #[allow(clippy::clone_on_copy)]
    pub fn instruction(&self) -> solana_program::instruction::Instruction {
        let accounts = CreateAccount {
            funding_account: self.funding_account.expect("funding_account is not set"),
            new_account: self.new_account.expect("new_account is not set"),
        };
        let args = CreateAccountInstructionArgs {
            lamports: self.lamports.clone().expect("lamports is not set"),
            space: self.space.clone().expect("space is not set"),
            owner: self.owner.clone().expect("owner is not set"),
        };

        accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
    }
}

/// `create_account` CPI accounts.
pub struct CreateAccountCpiAccounts<'a, 'b> {
    /// The payer for the new account
    pub funding_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The account to create
    pub new_account: &'b solana_program::account_info::AccountInfo<'a>,
}

/// `create_account` CPI instruction.
pub struct CreateAccountCpi<'a, 'b> {
    /// The program to invoke.
    pub __program: &'b solana_program::account_info::AccountInfo<'a>,
    /// The payer for the new account
    pub funding_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The account to create
    pub new_account: &'b solana_program::account_info::AccountInfo<'a>,
    /// The arguments for the instruction.
    pub __args: CreateAccountInstructionArgs,
}

impl<'a, 'b> CreateAccountCpi<'a, 'b> {
    pub fn new(
        program: &'b solana_program::account_info::AccountInfo<'a>,
        accounts: CreateAccountCpiAccounts<'a, 'b>,
        args: CreateAccountInstructionArgs,
    ) -> Self {
        Self {
            __program: program,
            funding_account: accounts.funding_account,
            new_account: accounts.new_account,
            __args: args,
        }
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], &[])
    }
    #[inline(always)]
    pub fn invoke_with_remaining_accounts(
        &self,
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
    }
    #[inline(always)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed_with_remaining_accounts(
        &self,
        signers_seeds: &[&[&[u8]]],
        remaining_accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> solana_program::entrypoint::ProgramResult {
        let mut accounts = Vec::with_capacity(2 + remaining_accounts.len());
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.funding_account.key,
            true,
        ));
        accounts.push(solana_program::instruction::AccountMeta::new(
            *self.new_account.key,
            true,
        ));
        remaining_accounts.iter().for_each(|remaining_account| {
            accounts.push(solana_program::instruction::AccountMeta {
                pubkey: *remaining_account.0.key,
                is_signer: remaining_account.1,
                is_writable: remaining_account.2,
            })
        });
        let mut data = CreateAccountInstructionData::new().try_to_vec().unwrap();
        let mut args = self.__args.try_to_vec().unwrap();
        data.append(&mut args);

        let instruction = solana_program::instruction::Instruction {
            program_id: crate::SYSTEM_PROGRAM_ID,
            accounts,
            data,
        };
        let mut account_infos = Vec::with_capacity(2 + 1 + remaining_accounts.len());
        account_infos.push(self.__program.clone());
        account_infos.push(self.funding_account.clone());
        account_infos.push(self.new_account.clone());
        remaining_accounts
            .iter()
            .for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

        if signers_seeds.is_empty() {
            solana_program::program::invoke(&instruction, &account_infos)
        } else {
            solana_program::program::invoke_signed(&instruction, &account_infos, signers_seeds)
        }
    }
}

/// Instruction builder for `CreateAccount` via CPI.
///
/// ### Accounts:
///
///   0. `[writable, signer]` funding_account
///   1. `[writable, signer]` new_account
pub struct CreateAccountCpiBuilder<'a, 'b> {
    instruction: Box<CreateAccountCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateAccountCpiBuilder<'a, 'b> {
    pub fn new(program: &'b solana_program::account_info::AccountInfo<'a>) -> Self {
        let instruction = Box::new(CreateAccountCpiBuilderInstruction {
            __program: program,
            funding_account: None,
            new_account: None,
            lamports: None,
            space: None,
            owner: None,
            __remaining_accounts: Vec::new(),
        });
        Self { instruction }
    }
    /// The payer for the new account
    #[inline(always)]
    pub fn funding_account(
        &mut self,
        funding_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.funding_account = Some(funding_account);
        self
    }
    /// The account to create
    #[inline(always)]
    pub fn new_account(
        &mut self,
        new_account: &'b solana_program::account_info::AccountInfo<'a>,
    ) -> &mut Self {
        self.instruction.new_account = Some(new_account);
        self
    }
    #[inline(always)]
    pub fn lamports(&mut self, lamports: u64) -> &mut Self {
        self.instruction.lamports = Some(lamports);
        self
    }
    #[inline(always)]
    pub fn space(&mut self, space: u64) -> &mut Self {
        self.instruction.space = Some(space);
        self
    }
    #[inline(always)]
    pub fn owner(&mut self, owner: Pubkey) -> &mut Self {
        self.instruction.owner = Some(owner);
        self
    }
    /// Add an additional account to the instruction.
    #[inline(always)]
    pub fn add_remaining_account(
        &mut self,
        account: &'b solana_program::account_info::AccountInfo<'a>,
        is_writable: bool,
        is_signer: bool,
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .push((account, is_writable, is_signer));
        self
    }
    /// Add additional accounts to the instruction.
    ///
    /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
    /// and a `bool` indicating whether the account is a signer or not.
    #[inline(always)]
    pub fn add_remaining_accounts(
        &mut self,
        accounts: &[(
            &'b solana_program::account_info::AccountInfo<'a>,
            bool,
            bool,
        )],
    ) -> &mut Self {
        self.instruction
            .__remaining_accounts
            .extend_from_slice(accounts);
        self
    }
    #[inline(always)]
    pub fn invoke(&self) -> solana_program::entrypoint::ProgramResult {
        self.invoke_signed(&[])
    }
    #[allow(clippy::clone_on_copy)]
    #[allow(clippy::vec_init_then_push)]
    pub fn invoke_signed(
        &self,
        signers_seeds: &[&[&[u8]]],
    ) -> solana_program::entrypoint::ProgramResult {
        let args = CreateAccountInstructionArgs {
            lamports: self
                .instruction
                .lamports
                .clone()
                .expect("lamports is not set"),
            space: self.instruction.space.clone().expect("space is not set"),
            owner: self.instruction.owner.clone().expect("owner is not set"),
        };
        let instruction = CreateAccountCpi {
            __program: self.instruction.__program,

            funding_account: self
                .instruction
                .funding_account
                .expect("funding_account is not set"),

            new_account: self
                .instruction
                .new_account
                .expect("new_account is not set"),
            __args: args,
        };
        instruction.invoke_signed_with_remaining_accounts(
            signers_seeds,
            &self.instruction.__remaining_accounts,
        )
    }
}

struct CreateAccountCpiBuilderInstruction<'a, 'b> {
    __program: &'b solana_program::account_info::AccountInfo<'a>,
    funding_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    new_account: Option<&'b solana_program::account_info::AccountInfo<'a>>,
    lamports: Option<u64>,
    space: Option<u64>,
    owner: Option<Pubkey>,
    /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
    __remaining_accounts: Vec<(
        &'b solana_program::account_info::AccountInfo<'a>,
        bool,
        bool,
    )>,
}
